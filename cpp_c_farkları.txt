
Cpp de;
implicit int yok. Yani c de olan;

implicit int (gizli int)

int func();
func();
aynı tanımlamadır. Yani int yazılmadığı zaman, fonksiyon int olarak algılamaktadır. 

cpp de scope leakage vardır. Bu da değişkenlerin kapsamının az tutulması demektir.
Yani değişkeni ilk nerede kullancaksak orada tanımlamamız gerekir.
----------------------------------------------------------------------------------------

c de;
loose type control 
Yani derleme zamanı kontrolleri zayıftır. 

cpp de;
strict type control
Yani derleme zamanı kontrolleri katıdır.
Bu da cpp yi daha güvenilir yapar. Derlendikten sonra hata alma ihtimalimiz azalır.
----------------------------------------------------------------------------------------

c de;
'A' //character constant denmektedir. Ancak bunun türü int olmaktadır.

cpp de;  
'A' //character literal denmektedir. Bunun türü char olmaktadır.
----------------------------------------------------------------------------------------

c de; 
"Hasan Basri" //string literali. C de bunun türü, "char dizi[12]" dir.

cpp de;
"Hasan Basri" //string literali. Cpp de bunun türü, "const char dizi[12]" dir.
----------------------------------------------------------------------------------------

her ne kadar c de const char dememiş olsakta, string literallerinin değiştirilebilir olduğu manasına gelmez. String literalleri değiştirilemezler. Değiştirme işlemi tanımsız davranıştır.

örneğin;
char* p ="kaya";
*p = 'm'; 
yapılamaz. Tanımsız davranıştır.
 ----------------------------------------------------------------------------------------

c de;
const int x;
c de const nesneler initilaize edilmek zorunda değildir.

cpp de;
const int x = 10;
cpp de const nesneler initilaize edilmek zorundadır. 
----------------------------------------------------------------------------------------

static anahtar sözcüğü, iç bağlantı sağlar. İç bağlantı, sadece o dosyanın içinde kullanılabilirken, dış bağlantı olursa, diğer modüllerden de erişilebilir.
C ve Cpp de global tanımlamalar dış bağlantıdır. Global tanımlamalar staticle belirtilirse iç bağlantı olur.
----------------------------------------------------------------------------------------

C de globalde tanımlanan;
const int x = 10; //external (dış) bağlantıyken

Cpp de globalde tanımlanan;
const int x = 10; //iç (internal) bağlantı olur.
----------------------------------------------------------------------------------------

c de karşılaştırma operatörleri
10 > 5 //bunun sonucunun türü int ve değeri 1 iken

ccp de;
10 > 5 //bunun türü bool ve değeri true dur.
----------------------------------------------------------------------------------------

cpp de bool ve int arasında örtülü tür dönüşümü vardır.;
int x = 10;
bool y = x; olursa, // b = true olacaktır.

Eğer;
int x = 0;
bool y = x; olursa, // b = false olacaktır.
----------------------------------------------------------------------------------------

cpp de adreslerden(pointerlerden) de bool türüne örtülü tür dönüşümü vardır.
içi dolu pointerler true sonuç verirken, null pointer false sonucunu verecektir.
----------------------------------------------------------------------------------------

Bool türünden aritmatik türe de örtülü dönüşüm vardır. 
bool değer olarak true 1 e dönüşürken, 
false değer 0 a dönüşecektir.
----------------------------------------------------------------------------------------

Ancak bool türünden tanımlanan değişkenlerle toplama, çıkarma, ++, -- işlemleri kullanılamaz.
----------------------------------------------------------------------------------------

bool un sizeof değeri 1 dir.
Bitsel düzeyde de temsil edilemez.
----------------------------------------------------------------------------------------

nullptr nin türü nullptr_t dir.
artık cpp de, null ve ya 0 kullanmak yerine nullptr kullanmak gerekecektir.
----------------------------------------------------------------------------------------

array decay???
const???
pointer??? (invalid pointer, dangling pointer, valid pointer)

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

2. ders

c de user define type;
structures
unions
enumarations

cpp de user define type;
class
structures
unions
enumarations

c deki structures ile cpp deki aynı değildir.
----------------------------------------------------------------------------------------

c de user define type lar en az bir üyeye (member) sahip olmalıdır.

cpp de ise user define typelar herhangi bir üyeye sahip olmak zorunda değildir. Bu durum aynı zamanda çok sık kullanılır.
----------------------------------------------------------------------------------------

scope???  
name lookup???
linkage???

----------------------------------------------------------------------------------------

:: // scope resolution operator

----------------------------------------------------------------------------------------

Generic Programalama
Özetle derleyiciye kod yazdıran programlama türüdür denebilir. Yani c de yazdığımı kod doğrudan assembly diline çevrilirken, generic programalamayı kapsayan dil olan c++ da yazdığımız kodlar sayesinde, derleyiciye kod yazdırırız. Derleyiciye kod yazdıran araç ise, 
template tir. Template(Şablon)

----------------------------------------------------------------------------------------

C de olmayıp Cpp de olan bir araçta type deductiondur. Türkçe çevirisi ise tür çıkarımıdır. 

type deductionda auto anahtar sözcüğü kullanılmaktadır.

----------------------------------------------------------------------------------------

overload edilmiş anahtar kelimeler (Kullanım biçimine göre farklı anlamları olan anahtar kelimeler)

c de sadece static anahtar kelimesi vardır. Onun dışındakiler tek bir manaya sahiptir.
cpp de ise static, using, auto, mutable anahtar sözcükler overload edilmiştir.

----------------------------------------------------------------------------------------

İlk değer verme (initialize etme)

int x = 10; // initializition (ilk değer verme)
x = 35;     // assignment (atama)

cpp de atama ve ilk değer verme çok önemlidir. C de bu kadar önemli değildir.

----------------------------------------------------------------------------------------

default initializition (bu şekilde kullanmak iyi bir tanımlama değil. Mümkünse kullanmayın.)
int main()
{
    int x;
}

----------------------------------------------------------------------------------------
zero initializition (Değişkenin değerinin sıfır değeri ile başlatılması demektir. Bool türdense false değerle başlatılması demektir. Pointe değişkennlerse nullptr ile initialize edilmesi demektir.)

bool flag; // false değerle başlatılır.
int x;	   // 0 değerini alır
ptr* abc;  // nullptr değeriyle başlar.

int main()
{
}
----------------------------------------------------------------------------------------

int main ()
{
	int x = 10; 	// copy initializition
	int y(20);	//direct initializition (c de yok)
}

----------------------------------------------------------------------------------------

// bunu tekrardan izle. saat 1.00.00 sonrasına  bakabilirsin.
uniform initializition (brace initializition)

int main()
{
	int z{40};
}

----------------------------------------------------------------------------------------

Dizileri initialize etme

int main()
{
	int x[] = {1,2,3,4,5};
	int x[]{1,2,3,4,5};
	int x[](1,2,3,4,5);
}
üçü de aynı manaya gelmektedir.

----------------------------------------------------------------------------------------

Value initializition

bunun kulanılmasının sebebi, x in itialize edildiği değer 0 olur.
Bool olursa, false
pointer olursa nullptr olarak başlar.

int main()
{
	int x{};
}

----------------------------------------------------------------------------------------

BU karıştırılmamalı. BUrada x bir değişken değil, fonksiyon bildirimidir. Bu yüzden değişken olarak düşünmemek lazım.

int main()
{
	int x();
}


----------------------------------------------------------------------------------------
1.00.00 ile 1.45.00 arasını tekrar izle. Bu aralığı not ALMADIM.
----------------------------------------------------------------------------------------

cpp de c kütüphaneleri include edilecekse örneğin,
<string.h> kütüphanesini <cstring> olarak ifade etmek lazım. Neco nedenini söylemedi. Ancak bu şekilde olması gerektiğini ciddi şekilde vurguladı.
Ve ya c deki include <time.h> kütüphanesi include <ctime> olarak include edilmeli.

kendi oluşturduğumuz header fileleri ise, gene aynı şekilde include "hasan.h" olarak include edeceğiz.

----------------------------------------------------------------------------------------
2. dersi tekrardan izle...
2. dersi tekrardan izle...
2. dersi tekrardan izle...
2. dersi tekrardan izle...
2. dersi tekrardan izle...
2. dersi tekrardan izle...
2. dersi tekrardan izle...
----------------------------------------------------------------------------------------


